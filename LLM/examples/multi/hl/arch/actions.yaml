entries:
  convo:
    ############################################################################
    ###############################     0     ##################################
    ############################################################################
    0:
      Q:
        role: 'user'
        content: |
          In this scenario, we want to construct an arch using 3 blocks and a robotic arm. The blocks are
          initially distributed on the table in positions (32,60), (113,83), and (44,40). Blocks b1 and b2 have 
          dimensions 1x1x1 whereas b3 is longer and is considered as an architrave. The goal is to build
          the two pillars with b1 and b2 in positions (86,52) and (72,52), respectively, and place b3 on top of 
          them as an architrave in position (79, 52). There are two agents that can:
          - from a position on the table to another position on the table;
          - from a position on the table, to the top of another block;
          - from the top of a block, to a position on the table;
          - from the top of a block, to the top of another block.
          The action to place the last block on top as an architrave should be handled differently than these 
          moves as it must check that the two pillars have been built. 
          The agents are available and can be used. The blocks are initially free and can be moved by the agents.
          Moreover, the initial and final states and the knowledge base extracted before are the following:
          ```KB
          % Positions
          pos(32,60).
          pos(113,83).
          pos(44,40).
          pos(86,52).
          pos(72,52).
          pos(79,52).

          % Blocks
          block(b1).
          block(b2).
          arch(b3).

          % Agents
          agent(a1).
          agent(a2).

          % Resources
          resources(agent(_)).
          ```
          ```init
          init_state([
            ontable(b1), ontable(b2), ontable(b3),
            at(b1,32,60), at(b2,113,83), at(b3,44,40),
            clear(b1), clear(b2), clear(b3),
            available(arm1), available(arm2)
          ]).
          ```
          ```goal
          goal_state([
            ontable(b1), ontable(b2),
            pillar(p1, b1), pillar(p2, b2), arch(b3, p1, p2),
            at(b1,86,52), at(b2,72,52), at(b3,79,52),
            clear(b3),
            available(arm1), available(arm2)
          ]).
          ```
          Can you provide the set of actions?
      A:
        role: 'assistant'
        content: |
          ```actions
          % Move a block from a position on the table to another position on the table
          action(move_table_to_table_start(Agent, Block, X1, Y1, X2, Y2), 
            [ontable(Block), at(Block, X1, Y1), available(Agent), clear(Block)],
            [at(_, X2, Y2), on(Block, _), moving_table_to_table(_, Block, _, _, _, _), moving_table_to_block(_, Block, _, _, _, _, _)],
            [],
            [agent(Agent), pos(X1, Y1), pos(X2, Y2), block(Block), X1\=X2, Y1\=Y2],
            [
              del(available(Agent)), del(clear(Block)), del(ontable(Block)), del(at(Block, X1, Y1)),
              add(moving_table_to_table(Agent, Block, X1, Y1, X2, Y2))
            ]
          ).
          action(move_table_to_table_end(Agent, Block, X1, Y1, X2, Y2),
            [moving_table_to_table(Agent, Block, X1, Y1, X2, Y2)],
            [at(_, X2, Y2)],
            [],
            [],
            [
              del(moving_table_to_table(Agent, Block, X1, Y1, X2, Y2)),
              add(ontable(Block)), add(at(Block, X2, Y2)), add(clear(Block)), add(available(Agent))
            ]
          ).

          % Move a block from a position on the table to the top of another block
          action(move_table_to_block_start(Agent, Block1, Block2, X1, Y1, X2, Y2),
            [available(Agent), ontable(Block1), at(Block1, X1, Y1), at(Block2, X2, Y2), clear(Block2), clear(Block1)],
            [on(_, Block1), on(Block1, _), moving_table_to_table(_, Block, _, _, _, _), moving_table_to_block(_, Block, _, _, _, _, _)],
            [],
            [agent(Agent), pos(X1, Y1), pos(X2, Y2), block(Block1), block(Block2), Block1 \= Block2],
            [
              del(available(Agent)), del(clear(Block1)), del(ontable(Block1)), del(at(Block1, X1, Y1)),
              add(moving_table_to_block(Agent, Block1, Block2, X1, Y1, X2, Y2))
            ]
          ).
          action(move_table_to_block_end(Agent, Block1, Block2, X1, Y1, X2, Y2),
            [moving_table_to_block(Agent, Block1, Block2, X1, Y1, X2, Y2), clear(Block2)],
            [],
            [],
            [agent(Agent)],
            [
              del(clear(Block2)), del(moving_table_to_block(Agent, Block1, Block2, X1, Y1, X2, Y2)),
              add(on(Block1, Block2)), add(at(Block1, X2, Y2)), add(clear(Block1)), add(available(Agent))
            ]
          ).

          % Move a block from the top of another block to a position on the table
          action(move_onblock_to_table_start(Agent, Block1, X1, Y1, X2, Y2),
            [available(Agent), on(Block1, Block2), at(Block1, X1, Y1), at(Block2, X1, Y1), clear(Block1)],
            [moving_onblock_to_table(_, Block1, _, _, _, _), on(_, Block1), ontable(Block1), at(_, X2, Y2)],
            [],
            [agent(Agent), pos(X1, Y1), pos(X2, Y2), block(Block1), block(Block2), Block1 \= Block2],
            [
              del(available(Agent)), del(clear(Block1)), del(on(Block1, Block2)), del(at(Block1, X1, Y1)),
              add(moving_onblock_to_table(Agent, Block1, X1, Y1, X2, Y2)), add(clear(Block2))
            ]
          ).
          action(move_onblock_to_table_end(Agent, Block1, X1, Y1, X2, Y2),
            [moving_onblock_to_table(Agent, Block1, X1, Y1, X2, Y2)],
            [at(_, X2, Y2)],
            [],
            [agent(Agent)],
            [
              del(moving_onblock_to_table(Agent, Block1, X1, Y1, X2, Y2)),
              add(ontable(Block1)), add(at(Block1, X2, Y2)), add(clear(Block1)), add(available(Agent))
            ]
          ).

          % Move a block from the top of another block to the top of another block
          action(move_onblock_to_block_start(Agent, Block1, Block2, X1, Y1, X2, Y2),
            [available(Agent), on(Block1, Block3), at(Block1, X1, Y1), at(Block2, X2, Y2), clear(Block2), clear(Block1)],
            [moving_onblock_to_block(_, Block1, _, _, _, _), on(_, Block1), ontable(Block1)],
            [],
            [agent(Agent), pos(X1, Y1), pos(X2, Y2), block(Block1), block(Block2), block(Block3), Block1 \= Block2, Block1 \= Block3, Block2 \= Block3],
            [
              del(available(Agent)), del(clear(Block1)), del(on(Block1, Block3)), del(at(Block1, X1, Y1)),
              add(moving_onblock_to_block(Agent, Block1, Block2, X1, Y1, X2, Y2)), add(clear(Block3))
            ]
          ).
          action(move_onblock_to_block_end(Agent, Block1, Block2, X1, Y1, X2, Y2),
            [moving_onblock_to_block(Agent, Block1, Block2, X1, Y1, X2, Y2), clear(Block2)],
            [],
            [],
            [agent(Agent)],
            [
              del(clear(Block2)), del(moving_onblock_to_block(Agent, Block1, Block2, X1, Y1, X2, Y2)),
              add(on(Block1, Block2)), add(at(Block1, X2, Y2)), add(clear(Block1)), add(available(Agent))
            ]
          ).

          % Place the architrave on top of the two pillars
          action(place_architrave_start(Agent, Arch, Block1, Block2, FromArchX, FromArchY, ToArchX, ToArchY, Block1X, Block1Y, Block2X, Block2Y),
            [available(Agent), ontable(Arch), at(Arch, FromArchX, FromArchY), at(Block1, Block1X, Block1Y), at(Block2, Block2X, Block2Y), clear(Block1), clear(Block2)],
            [moving_table_to_table(_, Arch, _, _, _, _), moving_table_to_block(_, Arch, _, _, _, _, _), moving_onblock_to_table(_, Arch, _, _, _, _), moving_onblock_to_block(_, Arch, _, _, _, _, _)],
            [],
            [ 
              agent(Agent), arch(Arch),
              pos(ToArchX, ToArchY), FromArchX \= ToArchX, FromArchY \= ToArchY
            ],
            [
              del(available(Agent)), del(clear(Arch)), del(ontable(Arch)), del(at(Arch, FromArchX, FromArchY)), del(clear(Block1)), del(clear(Block2)),
              add(placing_arch(Agent, Arch, Block1, Block2, FromArchX, FromArchY, ToArchX, ToArchY, Block1X, Block1Y, Block2X, Block2Y))
            ]
          ).
          action(place_architrave_end(Agent, Arch, Block1, Block2, FromArchX, FromArchY, ToArchX, ToArchY, Block1X, Block1Y, Block2X, Block2Y),
            [placing_arch(Agent, Arch, Block1, Block2, FromArchX, FromArchY, ToArchX, ToArchY, Block1X, Block1Y, Block2X, Block2Y)],
            [at(_, ToArchX, ToArchY)],
            [],
            [],
            [
              del(placing_arch(Agent, Arch, Block1, Block2, FromArchX, FromArchY, ToArchX, ToArchY, Block1X, Block1Y, Block2X, Block2Y)),
              add(on(Arch, Block1)), add(on(Arch, Block2)), add(at(Arch, ToArchX, ToArchY)), add(clear(Arch)), add(available(Agent))
            ]
          ).
          ```