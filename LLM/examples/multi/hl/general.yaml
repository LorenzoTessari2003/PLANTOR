entries:
  convo:
    ############################################################################
    ###############################     0     ##################################
    ############################################################################
    0: 
      Q:
        role: 'user'
        content: |
          How is your code divided?

      A:
        role: 'assistant'
        content: |
          The high-level knowledge base is composed of 4 parts:
          - `init` section, which contains the initial state of the environment;
          - `goal` section, which contains the final state of the environment;
          - `KB` section, which contains all the information that is not modified by the actions;
          - `actions` section, which contains the description of the actions that can be performed 
             by the agents.

          For example, the predicate `available(A)`, which states that the agent A is available, is 
          a predicate that is modified by the actions and should be placed in the `init` section.
          On the other hand, the predicate `pos(X,Y)`, which states that the position (X,Y) is a 
          possible position for the agents, is a predicate that is not modified by the actions and 
          should be placed in the `KB` section.


    ############################################################################
    ###############################     1     ##################################
    ############################################################################
    1:
      Q: 
        role: 'user'
        content: | 
          How do you describe the structure of an action?

      A:
        role: 'assistant'
        content: |
          In our knowledge base, every action is spilt into 'start' and 'end' actions.
          Our knowledge base is composed of predicates to describe the states and Prolog rules that 
          describe the actions leveraging the following structure:
          ```prolog
          action(Name(Argument1, Argument2, ...), 
            ValidConditions, 
            InvalidConditions, 
            InvalidConditionsAtEnd, 
            ConditionsOnKB, 
            Effects
          )
          ```
          The variable Name defines the name of the action and its arguments, e.g., for the action 
          corresponding to the gripping of an agent on a block, we use Name=grip(Agent,Block).
          The four variables that follow are lists of conditions that must be checked before 
          deciding whether to add the action or not:                     
          - `ValidConditions` is a list containing conditions that should be verified in the current 
            state;
          - `InvalidConditions` is a list containing conditions that must not be verified in the 
            current state;
          - `ValidConditionsAtEnd` is a list containing conditions that, if present in the current 
            state AND in the goal, prevent the action from being chosen;
          - `ConditionOnKB` is a list containing conditions that must be verified on the knowledge 
            base before deciding on the action.
          Finally, `Effects` is a list containing predicates on how to modify the current state in a 
          new state. Each predicate is in the form of either add(P(...)), which adds P(...) to the 
          state, or del(P(...)), which looks for P(...) in the current state and removes it.

          The list `ValidConditionsAtEnd` checks if a condition from the goal has already been 
          achieved and avoids actions which may make one of the contained conditions not to hold.
          `ConditionOnKB` is a list used to force the Prolog interpreter to ground the variables of 
          the action to some values. For example, if we want to perform an action on positions in 
          the environment, we may want to assert that the positions we are considering are actually 
          present in the knowledge base and so we add predicates for `pos(X,Y)` in this list.


    ############################################################################
    ###############################     2     ##################################
    ############################################################################
    2:
      Q: 
        role: 'user'
        content: |
          What information should be placed in the `KB`? 

      A:
        role: 'assistant'
        content: |
          In the `KB` section, one should place all those pieces of information that are important 
          for the execution of the actions, yet they are not modified by the same actions. 
          For example, one could place the available positions inside the knowledge base so that the
          planner knows which are the positions that can be used, but at the same time it uses other 
          predicates to state whether they are free or being used. 
          ```KB
          :-discontiguous pos/2.
          :-discontiguous wheeled/1.
          pos(1,2).
          pos(2,3).
          pos(3,4).
          wheeled(a1).
          wheeled(a3).
          ```
          In this knowledge base, we are saying that there three possible positions the robots can 
          move to/from and that agents a1 and a3 are wheeled robots. 


    ############################################################################
    ###############################     3     ##################################
    ############################################################################
    3:
      Q:
        role: 'user'
        content: |
          How are the initial and final state written?
      A:
        role: 'assistant'
        content: |
          The initial and final states should contain all those predicates that are used to describe 
          the state of the environment and of the agents at the beginning and at the end. It must 
          not contain predicates that state general information regarding the environment, such as 
          abilities of the agents, positions on the map, total number of appliances, etc.
          For example, the following initial state and knowledge base are correct as the former
          contains predicates describing information destined to change and the latter contains 
          predicates describing a static knowledge base.

          ```init
          init_state([at(a1, 1, 2), available(a1), available(a2), (at, 2, 3)]).
          ```

          ```KB
          :-discontiguous agent/1.
          :-discontiguous pos/2.
          agent(a1).
          agent(a2).
          pos(1,2).
          pos(2,3).
          pos(3,4).
          ```

          Though the following initial state and knowledge base are not correct:

          ```init
          init_state([
            pos(1,2), pos(2,3), pos(3,4), at(a1, 1, 2), available(a1), available(a2), (at, 2, 3)
          ]).
          ```

          ```KB
          :-discontiguous agent/1.
          agent(a1).
          agent(a2).
          ```

          As the information regarding the available positions should be stated in the `KB` section 
          since the positions remain the same in time.


    ############################################################################
    ###############################     4     ##################################
    ############################################################################
    4:
      Q:
        role: 'user'
        content: |
          What is considered to be a resource?
      A:
        role: 'assistant'
        content: |
          The resources are supplies that the planner can use in order to achieve the goal. For 
          instance, agents are considered resources, as they can be used to perform actions and the 
          planner can assign them. Another possibility is the robotics arms, which can be used to
          perform actions on the environment.  
          

    ############################################################################
    ###############################     5     ##################################
    ############################################################################
    5:
      Q:
        role: 'user'
        content: |
          What will be asked?
      A:
        role: 'assistant'
        content: |
          Through four different questions, you will be asked to generate the knowledge base, the 
          initial and goal states, and the actions that can be performed by the agents.
          Please, provide only the information that is needed at that moment and do not include
          information that is not necessary for the current question. 


 


