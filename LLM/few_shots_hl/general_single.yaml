entries:
  convo:
    ############################################################################
    ###############################     0     ##################################
    ############################################################################
    0: 
      Q:
        role: 'user'
        content: |
          How is your code divided?

      A:
        role: 'assistant'
        content: |
          The knowledge base is composed of two parts:
            - The list of available actions;
            - A knowledge base describing general information. 
          Moreover, it contains an initial and final states.

          If the asked question requires just a snippet of code, then you are free to answer as you please. 
          In any other circumstance, you'll have to include the following sections:
          ```actions
          ```

          ```KB
          ```

          ```init
          ```

          ```goal
          ```

          Any (or all) of them may be empty, but still every section must be present.


    ############################################################################
    ###############################     1     ##################################
    ############################################################################
    1:
      Q: 
        role: 'user'
        content: | 
          How do you describe the structure of an action?

      A:
        role: 'assistant'
        content: |
          In our knowledge base, every action is spilt into 'start' and 'end' actions.
          Our knowledge base is composed of predicates to describe the states, and Prolog rules that describe the actions leveraging the following structure:
          ```prolog
          action(
            Name(Argument1, Argument2, ...), 
            ValidConditions, 
            InvalidConditions, 
            InvalidConditionsAtEnd, 
            ConditionsOnKB, 
            Effects
          )
          ```
          The variable Name defines the name of the action and its argument, e.g., for the action corresponding to the gripping of an agent on a block, we use Name=grip(Agent,Block).
          The five variables that follow are lists of conditions that must be checked before deciding whether to add the action or not:                     
          - `ValidConditions` is a list containing conditions that should be verified in the current state;
          - `InvalidConditions` is a list containing conditions that must not be verified in the current state;
          - `ValidConditionsAtEnd` is a list containing conditions that, if present in the current state AND in the goal, prevent the action from being chosen;
          - `ConditionOnKB` is a list containing conditions that must be verified on the knowledge base before deciding on the action.
          - `Effects` is a list containing predicates on how to modify the current state in a new state. Each predicate is in the form of either add(P(...)), which adds P(...) to the state, or del(P(...)), which looks for P(...) in the current state and removes it.

          The list ValidConditionsAtEnd checks if a condition from the goal has already been achieved and avoids actions which may make one of the contained conditions not to hold.
          ConditionOnKB is a list used to force the Prolog interpreter to ground the variables of the action to some values.

          For example, in the knowledge base there may be predicates describing the possible positions in which blocks may be placed: 
          - `pos(1,2)` indicates the position at coordinates (1,2);
          - `pos(0,0)` indicates the position at coordinates (0,0).


    ############################################################################
    ###############################     2     ##################################
    ############################################################################
    2:
      Q: 
        role: 'user'
        content: |
          What information should be placed in the `KB`? 

      A:
        role: 'assistant'
        content: |
          In the `KB` section, one should place all those pieces of information that are important for the execution of the actions, yet they are not modified by the same actions. 
          For example, one could place the available positions inside the knowledge base so that the planner knows which are the positions that can be used, but at the same time it uses other predicates to state that they are free or being used. 
          ```KB
          :-discontiguous pos/2.
          :-discontiguous wheeled/1.
          pos(1,2).
          pos(2,3).
          pos(3,4).
          wheeled(a1).
          wheeled(a3).
          ```
          In this knowledge base, we are saying that there three possible positions the robots can move to/from and that agents a1 and a3 are wheeled robots. 


    ############################################################################
    ###############################     3     ##################################
    ############################################################################
    3:
      Q:
        role: 'user'
        content: |
          How are the initial and final state written?
      A:
        role: 'assistant'
        content: |
          The initial and final states should contain all those predicates that are used to describe the state of the environment and of the agents at the beginning and at the end. It must not contain predicates that state general information regarding the environment, such as abilities of the agents, positions on the map, total number of appliances, etc.
          For example, the following initial state is correct as it contains predicates describing information destined to change.

          ```init
          [at(a1, 1, 2), available(a1), available(a2), (at, 2, 3)]
          ```

          ```KB
          :-discontiguous agent/1.
          :-discontiguous pos/2.
          agent(a1).
          agent(a2).
          pos(1,2).
          pos(2,3).
          pos(3,4).
          ```

          Though the following state is not correct:

          ```init
          [pos(1,2), pos(2,3), pos(3,4), at(a1, 1, 2), available(a1), available(a2), (at, 2, 3)]
          ```

          ```KB
          :-discontiguous agent/1.
          agent(a1).
          agent(a2).
          ```

          As the information regarding the available positions should be stated in the `KB` section since the positions remain the same.
