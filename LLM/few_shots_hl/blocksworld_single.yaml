entries:
  convo:
    ############################################################################
    ###############################     0     ##################################
    ############################################################################
    0: 
      Q:
        role: 'user'
        content: | 
          Can you generate a Prolog snippet of code that describe the following problem? 
          Given an initial state in which there are two blocks b1, b2 in position (1,1) and (2,2) 
          respectively, move the block b1 to position (3,3) and place b2 on top of b1 using an 
          agent, which is initially available and it will also be available at the end.

      A:
        role : 'assistant'
        content: |
          Sure. The problem states that at the beginning there are two blocks on the table: we shall 
          use the `ontable(Block)` predicate to describe this. To state the position of the blocks
          we'll use the predicate `at(Block, X, Y)`. Since both blocks do not have a block over them
          they are clear to be picked-up, so we use the predicate `clear(Block)` to describe this. 
          Finally, the agent is available at the beginning, so we'll use the predicate 
          `available(Agent)`.
          Here it the initial state in Prolog:
          ```init
          init_state([
            ontable(b1), ontable(b2),
            at(b1,1,1), at(b2,2,2), 
            clear(b1), clear(b2),
            available(a1)
          ]).
          ```

          At the end, the problem state that block b2 is on top of block b1, so we'll use the
          predicate `on(BlockTop, BlockBottom)` to describe that `BlockTop` is on top of 
          `BlockBottom`. Notice that now only b2 will be pickable, hence we'll have the predicate
          `clear(b2)`, but not the predicate `clear(b1)`. 
          Here is the Prolog code for the goal state:
          ```goal
          goal_state([
            ontable(b1),
            on(b2,b1),
            at(b1,3,3), at(b2,3,3), 
            clear(b2),
            available(a1)
          ]).
          ```

          Finally the empty sections that must be present anyway in the code:
          ```KB
          ```
          ```actions
          ```
          
    ############################################################################
    ###############################     1     ##################################
    ############################################################################
    1:
      Q:
        role: 'user'
        content: | 
          Can you generate a Prolog snippet of code that describe the following problem? 
          Given an initial state in which there are two blocks b1, b2 on the table in positions 
          (1,1) and (2,2), respectively, and a third block b3 on top of b1 in position (1,1), move 
          the block b3 on top of b2 using an agent, which is initially available and it will also be 
          available at the end.

      A:
        role : 'assistant'
        content: |
          Sure. The problem states that at the beginning there are two blocks on the table: we shall 
          use the `ontable(Block)` predicate to describe this. It also says that there is a block,
          namely b3, which is on top of b1, so we'll use the predicate `on(BlockTop, BlockBottom)`
          to specify that `BlockTop` is positioned above `BlockBottom`. To state the position of the
          blocks we'll use the predicate `at(Block, X, Y)`. Since both blocks do not have a block
          over them they are clear to be picked-up, so we use the predicate `clear(Block)` to 
          describe this. Finally, the agent is available at the beginning, so we'll use the 
          predicate `available(Agent)`.
          Here it the initial state in Prolog:
          ```init
          init_state([
            ontable(b1), ontable(b2), on(b3, b1),
            at(b1,1,1), at(b2,2,2), at(b3,1,1),
            clear(b3), clear(b2),
            available(a1)
          ]).
          ```

          At the end, the problem state that block b3 is on top of block b2, so we'll have that 
          b3 is on top of b2. Notice that now only b3 will be pickable, hence we'll have the 
          predicate `clear(b3)`, but not the predicate `clear(b2)`. We'll also have that b1 is
          clear since it does not have any block on top of it anymore. 
          Here is the Prolog code for the goal state:
          ```goal
          goal_state([
            ontable(b1), ontable(b2), on(b3,b2),
            at(b1,1,1), at(b2,2,2), at(b3,2,2),
            clear(b1), clear(b3),
            available(a1)
          ]).
          ```
          
          Finally the empty sections that must be present in the code:
          ```KB
          ```
          ```actions
          ```
    ############################################################################
    ###############################     2     ##################################
    ############################################################################
    2:
      Q:
        role: 'user'
        content: | 
          Can you generate a Prolog snippet of code that describe the following problem? 
          Given an initial state in which there are four blocks b1, b2, b3, b5 on the table in 
          positions (2,2), (1,1), (3,3), (4,4), respectively, and a fifth block b4 on top of b3 in 
          position (3,3), move the block b2 on top of b1, b3 on top of b2 and place b5 on the table 
          in position (0,0) and b4 on the table in position (3,3). The agent is initially available 
          and it will also be available at the end.

      A:
        role : 'assistant'
        content: |
          Sure. The problem states that at the beginning there are 4 blocks on the table: we shall 
          use the `ontable(Block)` predicate to describe this. It also says that there is a block
          on top of another block, so we'll use the predicate `on(BlockTop, BlockBottom)` to specify
          that `BlockTop` is positioned above `BlockBottom`. To state the position of the blocks 
          we'll use the predicate `at(Block, X, Y)`. Since there are blocks that do not have a block 
          over them they are clear to be picked-up, so we use the predicate `clear(Block)` to 
          describe this. Finally, the agent is available at the beginning, so we'll use the 
          predicate `available(Agent)`.
          Here it the initial state in Prolog:
          ```init
          init_state([
            ontable(b1), ontable(b2), ontable(b3), on(b4, b3), ontable(b5),
            at(b1,2,2), at(b2,1,1), at(b3,3,3), at(b4,3,3), at(b5,4,4),
            clear(b1), clear(b2), clear(b4), clear(b5),
            available(a1)
          ]).
          ```

          At the end, the problem state that block b2 is on top of block b1 and b3 is on top of b2
          forming a pillar so we'll have two predicates `on(b2,b1)` and `on(b3,b2)`. Also, blocks
          b4 and b5 are now on the table. Notice that b3, b4 and b5 will be pickable, hence we'll 
          have the predicate `clear(Block)`, for the three blocks, but not for b1 or b2. We'll also
          Here is the Prolog code for the goal state:
          ```goal
          goal_state([
            ontable(b1), ontable(b4), ontable(b5),
            on(b2,b1), on(b3,b2),
            at(b1,2,2), at(b2,2,2), at(b3,2,2), at(b4,3,3), at(b5,0,0),
            clear(b3), clear(b4), clear(b5),
            available(a1)
          ]).
          ```
          
          Finally the empty sections that must be present in the code:
          ```KB
          ```
          ```actions
          ```

    ############################################################################
    ###############################     3     ##################################
    ############################################################################
    3:   
      Q:
        role: 'user'
        content: |
          Can you generate a prolog code including a set of actions in order for an agent to grip a block on the table at coordinate(X,Y) in accordance with the information provided?
      A: 
        role : 'assistant' 
        content: | 
          Sure, here is the Prolog code:
          ```actions
          % The robot starts to grip the block
          action(
          grip_ontable_start(Agent, Block), 
            [ontable(Block), at(Block, X, Y) available(Agent), clear(Block)],
            [gripped(_, Block), gripping(_, Block)],
            [ontable(Block), at(Block, X, Y)],
            [],
            [del(available(Agent)), add(gripping(Agent, Block))]
          ).                           

          % The robot finalize gripping the block
          action(grip_end(Agent, Block),
            [gripping(Agent, Block)],
            [],
            [],
            [],
            [del(clear(Block)), del(gripping(Agent, Block)), add(gripped(Agent, Block))]
          ).
          ```
          The above prolog code involving start and end actions allows an agent(robot) to grip an object. 
          The predicate 'clear' represents that there is no other block above the given block. 
          In order for the agent to start performing the gripping action, the object must not be held by another agent. Therefore, it is pointed out in the 'InvalidConditions' of the 'grip_ontable_start' action that the target object(Block1) must not be in the 'gripped' or 'gripping' conditions.
          The predicate 'gripped' represents that the target object is already gripped by an agent.
          The predicate 'gripping'  represents that an agent has started to perform gripping action but not finalized it yet.               
          A gripping action can only be finalized when the agent has already begun gripping. Therefore, gripping(Agent1, Block1) is in the ValidConditions.
                                
          In InvalidConditions of the action 'grip_ontable_start', [gripped(_, Block), gripping(_, Block)] implies that the object must not have already been held or started to be held by any robot.

          ```KB
          ```
          ```init
          ```
          ```goal
          ```

    ############################################################################
    ###############################     4     ##################################
    ############################################################################
    4:
      Q:
        role: 'user'
        content: |     
          Can you generate the code for the actions that can be done by the agents in this scenario?
          The agents can:
          - move a block from a position on the table to another position on the table. The block 
            moved must not have another block on top. 
          - move a block from a position on the table to the top of another block that is on the
            table. Neither blocks can have another block on top.
          - move a block B1 from the top of a block B2 to the top of another block B3. Neither B1 
            nor B3 can have a block on top of them and B2 will become free after the start of the 
            action.
          - move a block from the top of another block to a position on the table. The block moved 
            must not have another block on top and the final position must be free.
          Remember that the actions are durative actions and hence must be split in start and end 
          actions.
      
      A: 
        role: 'assistant'
        content: |
          Sure, here is the Prolog code for asked actions
          ```actions
          % Move Block1 from (X1,Y1) on the table to the top of block Block2 in (X2,Y2). Notice that we are not removing the predicates for Block2 yet as the action is not concluded yet.
          action(
            move_table_to_block_start(Agent, Block1, Block2, X1, Y1, X2, Y2),
            [available(Agent), ontable(Block1), at(Block1, X1, Y1), at(Block2, X2, Y2), clear(Block2), clear(Block1)],
            [on(_, Block1), on(Block1, _), moving_table_to_table(_, Block, _, _, _, _), moving_table_to_block(_, Block, _, _, _, _, _)],
            [],
            [agent(Agent), pos(X1, Y1), pos(X2, Y2), block(Block1), block(Block2), Block1 \= Block2],
            [
              del(available(Agent)), del(clear(Block1)), del(ontable(Block1)), del(at(Block1, X1, Y1)),
              add(moving_table_to_block(Agent, Block1, Block2, X1, Y1, X2, Y2))
            ]
          ).
          action(
            move_table_to_block_end(Agent, Block1, Block2, X1, Y1, X2, Y2),
            [moving_table_to_block(Agent, Block1, Block2, X1, Y1, X2, Y2), clear(Block2)],
            [],
            [],
            [agent(Agent)],
            [
              del(clear(Block2)), del(moving_table_to_block(Agent, Block1, Block2, X1, Y1, X2, Y2)),
              add(on(Block1, Block2)), add(at(Block1, X2, Y2)), add(clear(Block1)), add(available(Agent))
            ]
          ).
          % Move a block from a position (X1,Y1) to another position (X2,Y2) on the table. 
          action(
            move_table_to_table_start(Agent, Block, X1, Y1, X2, Y2), 
            [ontable(Block), at(Block, X1, Y1), available(Agent), clear(Block)],
            [at(_, X2, Y2), on(Block, _), moving_table_to_table(_, Block, _, _, _, _), moving_table_to_block(_, Block, _, _, _, _, _)],
            [],
            [agent(Agent), pos(X1, Y1), pos(X2, Y2), block(Block)],
            [
              del(available(Agent)), del(clear(Block)), del(ontable(Block)), del(at(Block, X1, Y1)),
              add(moving_table_to_table(Agent, Block, X1, Y1, X2, Y2))
            ]
          ).
          action(
            move_table_to_table_end(Agent, Block, X1, Y1, X2, Y2),
            [moving_table_to_table(Agent, Block, X1, Y1, X2, Y2)],
            [at(X2, Y2)],
            [],
            [agent(Agent)],
            [
              del(moving_table_to_table(Agent, Block, X1, Y1, X2, Y2)),
              add(ontable(Block)), add(at(Block, X2, Y2)), add(clear(Block)), add(available(Agent))
            ]
          ).
          % Move Block1 from (X1,Y1) on top of another block to the table in (X2,Y2).
          action(
            move_onblock_to_table_start(Agent, Block1, X1, Y1, X2, Y2),
            [available(Agent), on(Block1, Block2), at(Block1, X1, Y1), at(Block2, X1, Y1), clear(Block1)],
            [moving_onblock_to_table(_, Block1, _, _, _, _), on(_, Block1), ontable(Block1), at(_, X2, Y2)],
            [],
            [agent(Agent), pos(X1, Y1), pos(X2, Y2), block(Block1), block(Block2), Block1 \= Block2],
            [
              del(available(Agent)), del(clear(Block1)), del(on(Block1, Block2)), del(at(Block1, X1, Y1)),
              add(moving_onblock_to_table(Agent, Block1, X1, Y1, X2, Y2)), add(clear(Block2))
            ]
          ).
          action(
            move_onblock_to_table_end(Agent, Block1, X1, Y1, X2, Y2),
            [moving_onblock_to_table(Agent, Block1, X1, Y1, X2, Y2)],
            [at(_, X2, Y2)],
            [],
            [agent(Agent)],
            [
              del(moving_onblock_to_table(Agent, Block1, X1, Y1, X2, Y2)),
              add(ontable(Block1)), add(at(Block1, X2, Y2)), add(clear(Block1)), add(available(Agent))
            ]
          ).
          % Move Block1 from (X1,Y1) on top of another block to the top of block Block2 in (X2,Y2). Notice that we are not removing the predicates for Block2 yet as the action is not concluded yet.
          action(
            move_onblock_to_block_start(Agent, Block1, Block2, X1, Y1, X2, Y2),
            [available(Agent), on(Block1, Block3), at(Block1, X1, Y1), at(Block2, X2, Y2), clear(Block2), clear(Block1)],
            [moving_onblock_to_block(_, Block1, _, _, _, _), on(_, Block1), ontable(Block1)],
            [],
            [agent(Agent), pos(X1, Y1), pos(X2, Y2), block(Block1), block(Block2), block(Block3), Block1 \= Block2, Block1 \= Block3, Block2 \= Block3],
            [
              del(available(Agent)), del(clear(Block1)), del(on(Block1, Block3)), del(at(Block1, X1, Y1)),
              add(moving_onblock_to_block(Agent, Block1, Block2, X1, Y1, X2, Y2)), add(clear(Block3))
            ]
          ).
          action(
            move_onblock_to_block_end(Agent, Block1, Block2, X1, Y1, X2, Y2),
            [moving_onblock_to_block(Agent, Block1, Block2, X1, Y1, X2, Y2), clear(Block2)],
            [],
            [],
            [agent(Agent)],
            [
              del(clear(Block2)), del(moving_onblock_to_block(Agent, Block1, Block2, X1, Y1, X2, Y2)),
              add(on(Block1, Block2)), add(at(Block1, X2, Y2)), add(clear(Block1)), add(available(Agent))
            ]
          ).
          ```

          The remaining sections that must be present in the code:
          ```KB
          ```
          ```init
          ```
          ```goal
          ```





    #       Sure, here is the Prolog code: 
    #       ```prolog
    #       onTable(b2, 7, -5), clear(b2)

    #       ```       
    # ############################################################################
    # ###############################     5     ##################################
    # ############################################################################
    # 5:
    #   Q:
    #     role: 'user'
    #     content: |     
    #       Can you create a snippet of code for set of predicates in Prolog representing the fact that the block 1 is on the table at the point (7,-5) and the block 2 and block 3 are stacked from top to bottom on the table at coordinates (3,3)? Can you also provide a description of the set you produced?
    #   A: 
    #     role: 'assistant'
    #     content: |
    #       Sure, here is the Prolog code: 
    #       ```prolog
    #       onTable(b3, 3, 3), on(b2, b3, 3, 3) ,onTable(b1, 7, -5), clear(b1), clear(b2)
    #       ```
    #       The predicate 'onTable' implies the block is placed on a table. On the other hand, the predicate 'on' implies that the block is on top of another block at given coordinates.  
    #       Above prolog code respresents that the block 1 is on the table at the point (7,-5) and the block 2 and block 3 are stacked from top to bottom on the table at coordinates (3,3).

    # ############################################################################
    # ###############################     6     ##################################
    # ############################################################################
    # 6:
    #   Q:
    #     role: 'user'
    #     content: |
    #       Can you create a snippet of code in Prolog for a set of predicates representing the fact that the block 1 is on the table at the point (7,-5) and the block 3 is placed on the table at coordinates (3,3)? They both don't have blocks placed on top of them.   
    #   A: 
    #     role: 'assistant'
    #     content: |
    #       Sure, here is the Prolog code: 
    #       ```prolog
    #       onTable(b3, 3, 3), onTable(b1, 7, -5), clear(b1), clear(b3)
    #       ```       
    # ############################################################################
    # ###############################     7     ##################################
    # ############################################################################
    # 7:
    #   Q:
    #     role: 'user'
    #     content: |
    #       Can you create a snippet of Prolog code for a set of predicates stating that agent 1 is available to be used?
    #   A: 
    #     role: 'assistant'
    #     content: |
    #       Sure, here is the Prolog code: 
    #       ```prolog
    #       available(a1)
    #       ```    
    # ############################################################################
    # ###############################     8     ##################################
    # ############################################################################
    # 8:
    #   Q:
    #     role: 'user'
    #     content: |   
    #       Can you create a snippet of code for a set of predicates stating that agent 2 is available to be used?
    #   A: 
    #     role: 'assistant'
    #     content: |
    #       Sure, here is the Prolog code: 
    #       ```prolog
    #       available(a2)
    #       ```    
    # ############################################################################
    # ###############################     9     ##################################
    # ############################################################################
    # 9:
    #   Q:
    #     role: 'user'
    #     content: |
    #       Can you create a snippet of code for a set of predicates stating that agent 1 and agent 2 are available to be used and the block 2 and block 4 are on the table at coordinates (7,-5) and (5,-7), respectively, without any block on top of them?
    #   A: 
    #     role: 'assistant'
    #     content: |
    #       Sure, here is the Prolog code: 
    #       ```prolog
    #       available(a1), available(a2), onTable(b2, 7, -5), onTable(b4, 5, -7), clear(b2), clear(b4)
    #       ```    

    # ############################################################################
    # ###############################     10     ##################################
    # ############################################################################
    # 10:
    #   Q: 
    #     role: 'user'
    #     content: |
    #       Can you generate a prolog code including a set of actions in order for an agent to grip a block that is placed on top of another one at coordinates (X,Y)?
    #   A: 
    #     role: 'assistant'
    #     content: |
    #       Sure, here is the Prolog code:
    #       ```actions
    #       action(
    #         grip_on_start(Agent, Block), 
    #         [on(Block, Block1, X, Y), available(A), clear(Block)],
    #         [gripped(_, Block), gripping(_, Block)],
    #         [on(B, B1, X, Y)],
    #         [],
    #         [del(available(A)), add(gripping(A, B))]
    #       ).

    #       action(grip_end(Agent, Block),
    #         [gripping(Agent, Block)],
    #         [],
    #         [],
    #         [],
    #         [del(clear(Block)), del(gripping(Agent, Block1)), add(gripped(Agent, Block))]
    #       ).
    #       ```
    #       In the description it is implied that the agent must be available for it to grip a block and that the block being gripped must be clear.
    #       Moreover, once the block is being gripped, then the agent is not available and the block gripped is not clear.

    #       ```KB
    #       ```
          
    #       ```init
    #       ```

    #       ```goal
    #       ```

    # ############################################################################
    # ###############################     11     ##################################
    # ############################################################################
    # 11:
    #   Q: 
    #     role: 'user'
    #     content: |
    #       To query for a solution, we provide the initial and final states as input to the `go` function.

    #       Consider the following test cases in which some agents(a1, a2,..) are used to move a set of boxes (b1, b2, b3, ...) from an initial state to a final state.

    #       % From b1 at the point (2,2), b2 on the table at point (1,1) to b2,b1 stacked at point (3,3).
    #       test1 :- go(
    #         [available(a1), available(a2), available(a3), ontable(b1, 2, 2), ontable(b2, 1, 1), clear(b1), clear(b2)],
    #         [available(a1), available(a2), available(a3), ontable(b2,3,3), on(b1, b2, 3, 3), clear(b1)]
    #       ).
    #       % From b2,b1 stacked to b1, b2 on the table.
    #       test2 :- go(
    #         [available(a1), available(a2), available(a3), ontable(b2,1,1), on(b1, b2, 1, 1), clear(b1)],
    #         [available(a1), available(a2), available(a3), ontable(b1,2,2), ontable(b2, 3, 3), clear(b1), clear(b2)]
    #       ).
    #       % From b2,b1 stacked and b3 on the table to b1,b2,b3 stacked.
    #       test3 :- go(
    #         [available(a1), available(a2), available(a3), ontable(b2,1,1), on(b1, b2, 1, 1), clear(b1), ontable(b3, 2, 2), clear(b3)],
    #         [available(a1), available(a2), available(a3), ontable(b1,3,3), on(b2, b1, 3, 3), on(b3, b2, 3, 3), clear(b3)]
    #       ).
          
    #       Can you generate a prolog code containing a new test case, namely testCase, in which we use 3 agents to move the boxes b1, b2, b3, b4 on the table, which are at (1,1),(2,2),(3,3),(4,4), respectively, to a final stack [b1,b2,b3,b4] at point (6,6), which is ordered from top to bottom?

    
    #   A: 
    #     role: 'assistant'
    #     content: |
    #       Sure , here is the Prolog code to go from b1 at (1,1), b2 at (2,2), b3 at (3,3), and b4 at (4,4) to b1,b2,b3, b4 stacked at (6,6).
    #       ```init
    #       [available(a1), available(a2), available(a3), ontable(b1,1,1), clear(b1), ontable(b2,2,2), clear(b2), ontable(b3,3,3), clear(b3),ontable(b4,4,4), clear(b4)],
    #       ```

    #       ```goal
    #       [available(a1), available(a2), available(a3), ontable(b4,6,6), on(b4, b3, 6, 6), on(b3, b2, 6, 6), on(b2, b1, 6, 6), clear(b1)]
    #       ```

    # ############################################################################
    # ###############################     12     ##################################
    # ############################################################################
    # 12:
    #   Q: 
    #     role: 'user'
    #     content: |
    #       Can generate the high-level kb for the following blocks world scenario. We are given a set of 5 blocks b1, b2, b3, b4 and b5. b1, b2 and b3 are positioned on the table at coordinates (1,1), (2,2) and (3,3) respectively. b4 is placed on top of b3 and b5 is placed on top of b1. There are two robotics agents that can move the blocks around. The actions that the robot can perform are:
    #       - moving a block from the table to another position on the table;
    #       - moving a block from the table to the top of another block that is on the table;
    #       - moving a block from the table to the top of another block that is on top of another block;
    #       - moving a block from the top of another block to the table;
    #       - moving a block from the top of one block to the top of another block that is on the table;
    #       - moving a block from the top of one block to the top of another block that is on top of another block.
    #       The goal is to stack blocks b1 and b5 in position 5,5 so that b5 is on top of b1.
    #   A:
    #     role: 'assistant'
    #     content: |
    #       Sure, here is the high-level kb for the given blocks world scenario. We start with the general static knowledge base, which in this case will contain the available positions on the table, the blocks and the agents. Also notice that the agents in this instance are also resources that we can allocate, whereas the blocks are not resources since they are the objects that we are moving around. 
    #       ```KB
    #       :-discontiguous pos/2.
    #       :-discontiguous block/1.
    #       :-discontiguous agent/1.

    #       pos(1,1).
    #       pos(2,2).
    #       pos(3,3).
    #       pos(5,5).
          
    #       block(b1).
    #       block(b2).
    #       block(b3).
    #       block(b4).
    #       block(b5).
          
    #       agent(a1).

    #       resources(agent(_)).
    #       ```
    #       The initial state will contain the positions of the blocks and the agents, as well as the fact that the blocks that do not have another block on top of them are clear. Also the fact that the agent is available at the beginning
    #       ```init
    #       init_state=[ontable(b1), at(b1,1,1), ontable(b2), at(b2,2,2), clear(b2), ontable(b3), at(b3,3,3), on(b4,b3), at(b4,3,3), clear(b4), on(b5,b1), at(b5,1,1), clear(b5), available(a1)].
    #       ```
    #       The goal state will contain ALL the predicates that describe the final states. Blocks, b2, b3 and b4 have not been moved, so they will be in the same position as in the initial state. The goal is to stack blocks b1 and b5 in position 5,5 so that b5 is on top of b1. The agent is available again at the end.
    #       ```goal
    #       goal_state=[ontable(b1), at(b1,5,5), on(b5,b1), at(b5,5,5), clear(b5), ontable(b2), at(b2,2,2), clear(b2), ontable(b3), at(b3,3,3), on(b4,b3), at(b4,3,3), clear(b4), available(a1)].
    #       ```
    #       Finally, the list of actions. We are working with temporal planning, so each action is being divided in start and end. The 4 temporal actions, which will give a total of 8 snap actions, have been previously described and are the following:
    #       ```actions
    #       % Move a block from a position (X1,Y1) to another position (X2,Y2) on the table. 
    #       action(
    #         move_table_to_table_start(Agent, Block, X1, Y1, X2, Y2), 
    #         [ontable(Block), at(Block, X1, Y1), available(Agent), clear(Block)],
    #         [moving(_, Block), at(_, X2, Y2)],
    #         [ontable(Block), at(Block, X1, Y1)],
    #         [pos(X1, Y1), pos(X2, Y2), block(Block)],
    #         [
    #           del(available(Agent)), del(clear(Block)), del(ontable(Block)), del(at(Block, X1, Y1)),
    #           add(moving_table_to_table(Agent, Block, X1, Y1, X2, Y2))
    #         ]
    #       ).
    #       action(
    #         move_table_to_table_end(Agent, Block, X1, Y1, X2, Y2),
    #         [moving_table_to_table(Agent, Block, X1, Y1, X2, Y2)],
    #         [at(X2, Y2)],
    #         [],
    #         [],
    #         [
    #           add(ontable(Block)), add(at(Block, X2, Y2)), add(clear(Block)),
    #           del(moving_table_to_table(Agent, Block, X1, Y1, X2, Y2))
    #         ]
    #       ).
    #       % Move Block1 from (X1,Y1) to the top of block Block2 in (X2,Y2), which is on the table. Notice that we are not removing the predicates for Block2 yet as the action is not concluded yet.
    #       action(
    #         move_table_to_block_ontable_start(Agent, Block1, Block2, X1, Y1, X2, Y2),
    #         [available(Agent), ontable(Block1, X1, Y1), ontable(Block2, X2, Y2), clear(Block2), clear(Block1)],
    #         [moving(_, Block1), on(_, Block1, X2, Y2)],
    #         [ontable(Block1, X1, Y1)],
    #         [pos(X1, Y1), pos(X2, Y2), block(Block1), block(Block2)],
    #         [
    #           del(available(Agent)), del(clear(Block1)), del(ontable(Block1, X1, Y1)),
    #           add(moving_table_to_block_ontable(Agent, Block1, Block2, X1, Y1, X2, Y2))
    #         ]
    #       ).
    #       action(
    #         move_table_to_block_ontable_end(Agent, Block1, Block2, X1, Y1, X2, Y2),
    #         [moving_table_to_block_ontable(Agent, Block1, Block2, X1, Y1, X2, Y2), clear(Block2)],
    #         [],
    #         [],
    #         [],
    #         [
    #           del(clear(Block2)), del(moving_table_to_block_ontable(Agent, Block1, Block2, X1, Y1, X2, Y2)),
    #           add(on(Block1, Block2, X2, Y2)), add(clear(Block1)),
    #         ]
    #       ).

    #       % Move Block1 from (X1,Y1) to the top of block Block2 in (X2,Y2), which is on another block. Notice that we are not removing the predicates for Block2 yet as the action is not concluded yet.
    #       action(
    #         move_table_to_block_onblock_start(Agent, Block1, Block2, X1, Y1, X2, Y2),
    #         [available(Agent), ontable(Block1, X1, Y1), on(Block2, _, X2, Y2), clear(Block1)],
    #         [moving(_, Block1), on(_, Block1, X2, Y2)],
    #         [ontable(Block1, X1, Y1)],
    #         [pos(X1, Y1), pos(X2, Y2), block(Block1), block(Block2)],
    #         [
    #           del(available(Agent)), del(clear(Block1)), del(ontable(Block1, X1, Y1)),
    #           add(moving_table_to_block_onblock(Agent, Block1, Block2, X1, Y1, X2, Y2))
    #         ]
    #       ).
    #       action(
    #         move_table_to_block_onblock_end(Agent, Block1, Block2, X1, Y1, X2, Y2),
    #         [moving_table_to_block_onblock(Agent, Block1, Block2, X1, Y1, X2, Y2), clear(Block2)],
    #         [],
    #         [],
    #         [],
    #         [
    #           del(clear(Block2)), del(moving_table_to_block_onblock(Agent, Block1, Block2, X1, Y1, X2, Y2)),
    #           add(on(Block1, Block2, X2, Y2)), add(clear(Block1)),
    #         ]
    #       ).