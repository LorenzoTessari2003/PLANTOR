LL_DESCR_MOCK = """
Let the blocks and their positions be described in the high-level part.
There are 2 available agents that can carry out the task. They are available at the beginning and will be 
available at the end. The agents are actually robotic arms that can pick up blocks and move them around. At the 
beginning, the arms are in positions (0,0) and (3,3), respectively, while 
we do not care were they are at the end. The low_level actions that they can perform are:
- move_arm_start(arm, x1, y1, x2, y2), which makes the robotic arm starting to move from position (x1,y1) to position (x2,y2).
- move_arm_end(arm, x1, y1, x2, y2), which completes the movement of the robotic arm from position (x1,y1) to position (x2,y2).
- close_start(arm), which makes the gripper starting to close.
- close_end(arm), which indicates the gripper has closed.
- open_start(arm), which makes the gripper starting to open.
- open_end(arm), which indicates the gripper has opened.
Remember to use the appropriate tags for the code you produce and not to use prolog tags.
""".strip()

HL_KB_MOCK = {
    'kb': '% Positions\npos(2,2).\npos(4,4).\npos(8,8).\npos(1,1).\npos(3,3).\npos(5,5).\npos(6,6).\n\n% Blocks\nblock(b1).\nblock(b2).\nblock(b3).\nblock(b4).\nblock(b5).\nblock(b6).\nblock(b7).\n\n% Agents\nagent(a1).\nagent(a2).\n\n% Resources\nresources(agent(_)).', 
    'init': 'init_state([\n  ontable(b1), ontable(b2), ontable(b4), ontable(b6), ontable(b7),\n  on(b5, b1), on(b3, b2), \n  at(b1,2,2), at(b2,4,4), at(b4,8,8), at(b5,2,2), at(b3,4,4), at(b6,1,1), at(b7,3,3),\n  clear(b5), clear(b3), clear(b4), clear(b6), clear(b7),\n  available(a1), available(a2)\n]).', 
    'goal': 'goal_state([\n  ontable(b1), ontable(b2), ontable(b6), ontable(b7), ontable(b4),\n  on(b5, b4), on(b3, b2),\n  at(b1,2,2), at(b2,4,4), at(b3,4,4), at(b4,8,8), at(b5,8,8), at(b6,1,1), at(b7,3,3),\n  clear(b1), clear(b3), clear(b5), clear(b6), clear(b7),\n  available(a1), available(a2)\n]).', 
    'actions': '% Move a block from a position on the table to another position on the table\naction(\n  move_table_to_table_start(Agent, Block, X1, Y1, X2, Y2), \n  [ontable(Block), at(Block, X1, Y1), available(Agent), clear(Block)],\n  [at(_, X2, Y2), on(Block, _), moving_table_to_table(_, Block, _, _, _, _), moving_table_to_block(_, Block, _, _, _, _, _)],\n  [],\n  [agent(Agent), pos(X1, Y1), pos(X2, Y2), block(Block)],\n  [\n    del(available(Agent)), del(clear(Block)), del(ontable(Block)), del(at(Block, X1, Y1)),\n    add(moving_table_to_table(Agent, Block, X1, Y1, X2, Y2))\n  ]\n).\naction(\n  move_table_to_table_end(Agent, Block, X1, Y1, X2, Y2),\n  [moving_table_to_table(Agent, Block, X1, Y1, X2, Y2)],\n  [at(X2, Y2)],\n  [],\n  [agent(Agent)],\n  [\n    del(moving_table_to_table(Agent, Block, X1, Y1, X2, Y2)),\n    add(ontable(Block)), add(at(Block, X2, Y2)), add(clear(Block)), add(available(Agent))\n  ]\n).\n\n% Move a block from a position on the table to the top of another block\naction(\n  move_table_to_block_start(Agent, Block1, Block2, X1, Y1, X2, Y2),\n  [available(Agent), ontable(Block1), at(Block1, X1, Y1), at(Block2, X2, Y2), clear(Block2), clear(Block1)],\n  [on(_, Block1), on(Block1, _), moving_table_to_table(_, Block, _, _, _, _), moving_table_to_block(_, Block, _, _, _, _, _)],\n  [],\n  [agent(Agent), pos(X1, Y1), pos(X2, Y2), block(Block1), block(Block2), Block1 \\= Block2],\n  [\n    del(available(Agent)), del(clear(Block1)), del(ontable(Block1)), del(at(Block1, X1, Y1)),\n    add(moving_table_to_block(Agent, Block1, Block2, X1, Y1, X2, Y2))\n  ]\n).\naction(\n  move_table_to_block_end(Agent, Block1, Block2, X1, Y1, X2, Y2),\n  [moving_table_to_block(Agent, Block1, Block2, X1, Y1, X2, Y2), clear(Block2)],\n  [],\n  [],\n  [agent(Agent)],\n  [\n    del(clear(Block2)), del(moving_table_to_block(Agent, Block1, Block2, X1, Y1, X2, Y2)),\n    add(on(Block1, Block2)), add(at(Block1, X2, Y2)), add(clear(Block1)), add(available(Agent))\n  ]\n).\n\n% Move a block from the top of another block to a position on the table\naction(\n  move_onblock_to_table_start(Agent, Block1, X1, Y1, X2, Y2),\n  [available(Agent), on(Block1, Block2), at(Block1, X1, Y1), at(Block2, X1, Y1), clear(Block1)],\n  [moving_onblock_to_table(_, Block1, _, _, _, _), on(_, Block1), ontable(Block1), at(_, X2, Y2)],\n  [],\n  [agent(Agent), pos(X1, Y1), pos(X2, Y2), block(Block1), block(Block2), Block1 \\= Block2],\n  [\n    del(available(Agent)), del(clear(Block1)), del(on(Block1, Block2)), del(at(Block1, X1, Y1)),\n    add(moving_onblock_to_table(Agent, Block1, X1, Y1, X2, Y2)), add(clear(Block2))\n  ]\n).\naction(\n  move_onblock_to_table_end(Agent, Block1, X1, Y1, X2, Y2),\n  [moving_onblock_to_table(Agent, Block1, X1, Y1, X2, Y2)],\n  [at(_, X2, Y2)],\n  [],\n  [agent(Agent)],\n  [\n    del(moving_onblock_to_table(Agent, Block1, X1, Y1, X2, Y2)),\n    add(ontable(Block1)), add(at(Block1, X2, Y2)), add(clear(Block1)), add(available(Agent))\n  ]\n).\n\n% Move a block from the top of another block to the top of another block\naction(\n  move_onblock_to_block_start(Agent, Block1, Block2, X1, Y1, X2, Y2),\n  [available(Agent), on(Block1, Block3), at(Block1, X1, Y1), at(Block2, X2, Y2), clear(Block2), clear(Block1)],\n  [moving_onblock_to_block(_, Block1, _, _, _, _), on(_, Block1), ontable(Block1)],\n  [],\n  [agent(Agent), pos(X1, Y1), pos(X2, Y2), block(Block1), block(Block2), block(Block3), Block1 \\= Block2, Block1 \\= Block3, Block2 \\= Block3],\n  [\n    del(available(Agent)), del(clear(Block1)), del(on(Block1, Block3)), del(at(Block1, X1, Y1)),\n    add(moving_onblock_to_block(Agent, Block1, Block2, X1, Y1, X2, Y2)), add(clear(Block3))\n  ]\n).\naction(\n  move_onblock_to_block_end(Agent, Block1, Block2, X1, Y1, X2, Y2),\n  [moving_onblock_to_block(Agent, Block1, Block2, X1, Y1, X2, Y2), clear(Block2)],\n  [],\n  [],\n  [agent(Agent)],\n  [\n    del(clear(Block2)), del(moving_onblock_to_block(Agent, Block1, Block2, X1, Y1, X2, Y2)),\n    add(on(Block1, Block2)), add(at(Block1, X2, Y2)), add(clear(Block1)), add(available(Agent))\n  ]\n).'
}