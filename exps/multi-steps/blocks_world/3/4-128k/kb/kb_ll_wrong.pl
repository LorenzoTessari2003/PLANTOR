% This file was automatically generated by the LLM system
%%%%%%%%%%%%%%%%%%%%%%%
% kb
%%%%%%%%%%%%%%%%%%%%%%%
% Define positions on the table
pos(0,0).
pos(1,1).
pos(2,1).
pos(3,1).
pos(3,3).

% Define blocks
block(a).
block(b).
block(c).
block(d).

% Define agents
agent(agent1).
agent(agent2).

% Define resources
resources(agent(_)).
resources(ll_arm(_)).
resources(ll_gripper(_)).

% Define the arm positions
ll_arm_pos(agent1, 0, 0).
ll_arm_pos(agent2, 3, 3).

% Define the gripper states
ll_gripper(agent1, open).
ll_gripper(agent2, open).

%%%%%%%%%%%%%%%%%%%%%%%
% init
%%%%%%%%%%%%%%%%%%%%%%%
init_state([
    ontable(a), on(b, a), on(c, b), on(d, c),
    at(a, 1, 1), at(b, 1, 1), at(c, 1, 1), at(d, 1, 1),
    clear(d),
    available(agent1), available(agent2),
    ll_arm_pos(agent1, 0, 0), ll_arm_pos(agent2, 3, 3),
    ll_gripper(agent1, open), ll_gripper(agent2, open)
]).

%%%%%%%%%%%%%%%%%%%%%%%
% goal
%%%%%%%%%%%%%%%%%%%%%%%
goal_state([
    ontable(a), ontable(b), ontable(c), on(d, a),
    at(a, 1, 1), at(b, 2, 1), at(c, 3, 1), at(d, 1, 1),
    clear(b), clear(c), clear(d),
    available(agent1), available(agent2),
    ll_arm_pos(agent1, _, _), ll_arm_pos(agent2, _, _),
    ll_gripper(agent1, _), ll_gripper(agent2, _)
]).

%%%%%%%%%%%%%%%%%%%%%%%
% actions
%%%%%%%%%%%%%%%%%%%%%%%
% Move a block from a position to another position on the table
action(move_block_start(Agent, Block, X1, Y1, X2, Y2),
  [available(Agent), clear(Block), ontable(Block), at(Block, X1, Y1), pos(X2, Y2)],
  [at(_, X2, Y2)],
  [],
  [block(Block), agent(Agent)],
  [
    del(available(Agent)), del(clear(Block)), del(ontable(Block)), del(at(Block, X1, Y1)),
    add(moving(Agent, Block, X1, Y1, X2, Y2))
  ]
).
action(move_block_end(Agent, Block, X1, Y1, X2, Y2),
  [moving(Agent, Block, X1, Y1, X2, Y2)],
  [],
  [],
  [block(Block), agent(Agent)],
  [
    del(moving(Agent, Block, X1, Y1, X2, Y2)),
    add(available(Agent)), add(clear(Block)), add(ontable(Block)), add(at(Block, X2, Y2))
  ]
).

% Move a block that is on the table to the top of another one
action(move_block_to_top_start(Agent, Block1, Block2, X1, Y1, X2, Y2),
  [available(Agent), clear(Block1), clear(Block2), ontable(Block1), at(Block1, X1, Y1), at(Block2, X2, Y2)],
  [],
  [],
  [block(Block1), block(Block2), agent(Agent), Block1 \= Block2],
  [
    del(available(Agent)), del(clear(Block1)), del(clear(Block2)), del(ontable(Block1)), del(at(Block1, X1, Y1)),
    add(moving_to_top(Agent, Block1, Block2, X1, Y1, X2, Y2))
  ]
).
action(move_block_to_top_end(Agent, Block1, Block2, X1, Y1, X2, Y2),
  [moving_to_top(Agent, Block1, Block2, X1, Y1, X2, Y2)],
  [],
  [],
  [block(Block1), block(Block2), agent(Agent)],
  [
    del(moving_to_top(Agent, Block1, Block2, X1, Y1, X2, Y2)),
    add(available(Agent)), add(on(Block1, Block2)), add(at(Block1, X2, Y2)), add(clear(Block1))
  ]
).

% Move a block from the top of a block to another position on the table
action(move_top_block_to_table_start(Agent, Block1, Block2, X1, Y1, X2, Y2),
  [available(Agent), clear(Block1), on(Block1, Block2), at(Block1, X1, Y1), pos(X2, Y2)],
  [at(_, X2, Y2)],
  [],
  [block(Block1), block(Block2), agent(Agent), Block1 \= Block2],
  [
    del(available(Agent)), del(clear(Block1)), del(on(Block1, Block2)), del(at(Block1, X1, Y1)),
    add(moving_top_to_table(Agent, Block1, Block2, X1, Y1, X2, Y2))
  ]
).
action(move_top_block_to_table_end(Agent, Block1, Block2, X1, Y1, X2, Y2),
  [moving_top_to_table(Agent, Block1, Block2, X1, Y1, X2, Y2)],
  [],
  [],
  [block(Block1), block(Block2), agent(Agent)],
  [
    del(moving_top_to_table(Agent, Block1, Block2, X1, Y1, X2, Y2)),
    add(available(Agent)), add(ontable(Block1)), add(at(Block1, X2, Y2)), add(clear(Block1)), add(clear(Block2))
  ]
).

% Move a block from the top of a block to the top of another block
action(move_top_block_to_top_start(Agent, Block1, Block2, Block3, X1, Y1, X2, Y2),
  [available(Agent), clear(Block1), clear(Block3), on(Block1, Block2), at(Block1, X1, Y1), at(Block3, X2, Y2)],
  [],
  [],
  [block(Block1), block(Block2), block(Block3), agent(Agent), Block1 \= Block2, Block1 \= Block3, Block2 \= Block3],
  [
    del(available(Agent)), del(clear(Block1)), del(clear(Block3)), del(on(Block1, Block2)), del(at(Block1, X1, Y1)),
    add(moving_top_to_top(Agent, Block1, Block2, Block3, X1, Y1, X2, Y2))
  ]
).
action(move_top_block_to_top_end(Agent, Block1, Block2, Block3, X1, Y1, X2, Y2),
  [moving_top_to_top(Agent, Block1, Block2, Block3, X1, Y1, X2, Y2)],
  [],
  [],
  [block(Block1), block(Block2), block(Block3), agent(Agent)],
  [
    del(moving_top_to_top(Agent, Block1, Block2, Block3, X1, Y1, X2, Y2)),
    add(available(Agent)), add(on(Block1, Block3)), add(at(Block1, X2, Y2)), add(clear(Block1)), add(clear(Block2))
  ]
).


%%%%%%%%%%%%%%%%%%%%%%%
% ll_actions
%%%%%%%%%%%%%%%%%%%%%%%
% Low-level action for starting to move the robotic arm from one position to another
ll_action(move_arm_start(Arm, X1, Y1, X2, Y2),
  [ll_arm_at(Arm, X1, Y1), ll_gripper(Arm, _)],
  [ll_moving_arm(Arm, _, _, _, _)],
  [],
  [ll_arm(Arm), pos(X2, Y2)],
  [
    del(ll_arm_at(Arm, X1, Y1)),
    add(ll_moving_arm(Arm, X1, Y1, X2, Y2))
  ]
).

% Low-level action for completing the movement of the robotic arm
ll_action(move_arm_end(Arm, X1, Y1, X2, Y2),
  [ll_moving_arm(Arm, X1, Y1, X2, Y2)],
  [],
  [],
  [ll_arm(Arm), pos(X2, Y2)],
  [
    del(ll_moving_arm(Arm, X1, Y1, X2, Y2)),
    add(ll_arm_at(Arm, X2, Y2))
  ]
).

% Low-level action for starting to close the gripper
ll_action(close_start(Arm),
  [ll_gripper(Arm, open)],
  [ll_moving_arm(Arm, _, _, _, _), ll_gripping(Arm, _)],
  [],
  [ll_arm(Arm)],
  [
    del(ll_gripper(Arm, open)),
    add(ll_gripping(Arm, closing))
  ]
).

% Low-level action for indicating the gripper has closed
ll_action(close_end(Arm),
  [ll_gripping(Arm, closing)],
  [],
  [],
  [ll_arm(Arm)],
  [
    del(ll_gripping(Arm, closing)),
    add(ll_gripper(Arm, closed))
  ]
).

% Low-level action for starting to open the gripper
ll_action(open_start(Arm),
  [ll_gripper(Arm, closed)],
  [ll_moving_arm(Arm, _, _, _, _), ll_gripping(Arm, _)],
  [],
  [ll_arm(Arm)],
  [
    del(ll_gripper(Arm, closed)),
    add(ll_gripping(Arm, opening))
  ]
).

% Low-level action for indicating the gripper has opened
ll_action(open_end(Arm),
  [ll_gripping(Arm, opening)],
  [],
  [],
  [ll_arm(Arm)],
  [
    del(ll_gripping(Arm, opening)),
    add(ll_gripper(Arm, open))
  ]
).

%%%%%%%%%%%%%%%%%%%%%%%
% mappings
%%%%%%%%%%%%%%%%%%%%%%%
% Mapping for moving a block from one position to another on the table
mapping(move_block_start(Agent, Block, X1, Y1, X2, Y2),
  [
    move_arm_start(Agent, X1, Y1, X1, Y1),
    close_start(Agent),
    close_end(Agent),
    move_arm_start(Agent, X1, Y1, X2, Y2),
    move_arm_end(Agent, X1, Y1, X2, Y2),
    open_start(Agent),
    open_end(Agent)
  ]
).

% Mapping for moving a block from the table to the top of another block
mapping(move_block_to_top_start(Agent, Block1, Block2, X1, Y1, X2, Y2),
  [
    move_arm_start(Agent, X1, Y1, X1, Y1),
    close_start(Agent),
    close_end(Agent),
    move_arm_start(Agent, X1, Y1, X2, Y2),
    move_arm_end(Agent, X1, Y1, X2, Y2),
    open_start(Agent),
    open_end(Agent)
  ]
).

% Mapping for moving a block from the top of one block to another position on the table
mapping(move_top_block_to_table_start(Agent, Block1, Block2, X1, Y1, X2, Y2),
  [
    move_arm_start(Agent, X1, Y1, X1, Y1),
    close_start(Agent),
    close_end(Agent),
    move_arm_start(Agent, X1, Y1, X2, Y2),
    move_arm_end(Agent, X1, Y1, X2, Y2),
    open_start(Agent),
    open_end(Agent)
  ]
).

% Mapping for moving a block from the top of one block to the top of another block
mapping(move_top_block_to_top_start(Agent, Block1, Block2, Block3, X1, Y1, X2, Y2),
  [
    move_arm_start(Agent, X1, Y1, X1, Y1),
    close_start(Agent),
    close_end(Agent),
    move_arm_start(Agent, X1, Y1, X2, Y2),
    move_arm_end(Agent, X1, Y1, X2, Y2),
    open_start(Agent),
    open_end(Agent)
  ]
).
