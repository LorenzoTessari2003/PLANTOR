% This file was automatically generated by the LLM system
%%%%%%%%%%%%%%%%%%%%%%%
% kb
%%%%%%%%%%%%%%%%%%%%%%%
% Define positions on the table
pos(1,1). pos(2,1). pos(3,1). pos(4,1). pos(5,1).
pos(6,1). pos(7,1). pos(8,1). pos(9,1). pos(10,1).
pos(11,1). pos(12,1). pos(13,1). pos(14,1). pos(15,1).
pos(16,1). pos(17,1). pos(18,1). pos(19,1). pos(20,1).
pos(4,4). pos(5,5).

% Define blocks
block(b1). block(b2). block(b3). block(b4). block(b5).
block(b6). block(b7). block(b8). block(b9). block(b10).
block(b11). block(b12). block(b13). block(b14). block(b15).
block(b16). block(b17). block(b18). block(b19). block(b20).

% Define agents
agent(a1). agent(a2). agent(a3).

% Define robotic arms as agents with their initial positions
ll_arm(a1). ll_arm(a2). ll_arm(a3).
ll_arm_at(a1, 2, 2). ll_arm_at(a2, 3, 3). ll_arm_at(a3, 5, 5).

% Define grippers as part of the robotic arms, initially open
ll_gripper(a1, open). ll_gripper(a2, open). ll_gripper(a3, open).

% Define resources
resources(agent(_)).
resources(ll_arm(_)).
resources(ll_gripper(_)).

%%%%%%%%%%%%%%%%%%%%%%%
% init
%%%%%%%%%%%%%%%%%%%%%%%
init_state([
  ll_ontable(b1), ll_ontable(b2), ll_ontable(b3), ll_ontable(b4), ll_ontable(b5),
  ll_ontable(b6), ll_ontable(b7), ll_ontable(b8), ll_ontable(b9), ll_ontable(b10),
  ll_ontable(b11), ll_ontable(b12), ll_ontable(b13), ll_ontable(b14), ll_ontable(b15),
  ll_ontable(b16), ll_ontable(b17), ll_ontable(b18), ll_ontable(b19), ll_ontable(b20),
  ll_at(b1,1,1), ll_at(b2,2,1), ll_at(b3,3,1), ll_at(b4,4,1), ll_at(b5,5,1),
  ll_at(b6,6,1), ll_at(b7,7,1), ll_at(b8,8,1), ll_at(b9,9,1), ll_at(b10,10,1),
  ll_at(b11,11,1), ll_at(b12,12,1), ll_at(b13,13,1), ll_at(b14,14,1), ll_at(b15,15,1),
  ll_at(b16,16,1), ll_at(b17,17,1), ll_at(b18,18,1), ll_at(b19,19,1), ll_at(b20,20,1),
  ll_clear(b1), ll_clear(b2), ll_clear(b3), ll_clear(b4), ll_clear(b5),
  ll_clear(b6), ll_clear(b7), ll_clear(b8), ll_clear(b9), ll_clear(b10),
  ll_clear(b11), ll_clear(b12), ll_clear(b13), ll_clear(b14), ll_clear(b15),
  ll_clear(b16), ll_clear(b17), ll_clear(b18), ll_clear(b19), ll_clear(b20),
  ll_available(a1), ll_available(a2), ll_available(a3),
  ll_arm_at(a1, 2, 2), ll_arm_at(a2, 3, 3), ll_arm_at(a3, 5, 5),
  ll_gripper(a1, open), ll_gripper(a2, open), ll_gripper(a3, open)
]).

%%%%%%%%%%%%%%%%%%%%%%%
% goal
%%%%%%%%%%%%%%%%%%%%%%%
goal_state([
  ll_ontable(b1), ll_on(b2,b1), ll_on(b3,b2),
  ll_at(b1,4,4), ll_at(b2,4,4), ll_at(b3,4,4),
  ll_clear(b3),
  ll_available(a1), ll_available(a2), ll_available(a3),
  ll_arm_at(a1, _, _), ll_arm_at(a2, _, _), ll_arm_at(a3, _, _),
  ll_gripper(a1, _), ll_gripper(a2, _), ll_gripper(a3, _)
]).

%%%%%%%%%%%%%%%%%%%%%%%
% actions
%%%%%%%%%%%%%%%%%%%%%%%
% Move a block from a position on the table to another position on the table
action(move_block_table_to_table_start(Agent, Block, X1, Y1, X2, Y2),
  [available(Agent), ontable(Block), at(Block, X1, Y1), clear(Block)],
  [at(_, X2, Y2)],
  [],
  [agent(Agent), pos(X1, Y1), pos(X2, Y2), block(Block)],
  [
    del(available(Agent)), del(clear(Block)), del(ontable(Block)), del(at(Block, X1, Y1)),
    add(moving(Agent, Block, X1, Y1, X2, Y2))
  ]
).
action(move_block_table_to_table_end(Agent, Block, X1, Y1, X2, Y2),
  [moving(Agent, Block, X1, Y1, X2, Y2)],
  [at(_, X2, Y2)],
  [],
  [agent(Agent), pos(X2, Y2)],
  [
    del(moving(Agent, Block, X1, Y1, X2, Y2)),
    add(available(Agent)), add(clear(Block)), add(ontable(Block)), add(at(Block, X2, Y2))
  ]
).

% Move a block from the table to the top of another block
action(move_block_table_to_block_start(Agent, Block1, Block2, X1, Y1, X2, Y2),
  [available(Agent), ontable(Block1), at(Block1, X1, Y1), clear(Block1), at(Block2, X2, Y2), clear(Block2)],
  [],
  [],
  [agent(Agent), pos(X1, Y1), block(Block1), block(Block2)],
  [
    del(available(Agent)), del(clear(Block1)), del(ontable(Block1)), del(at(Block1, X1, Y1)),
    add(moving(Agent, Block1, X1, Y1, X2, Y2))
  ]
).
action(move_block_table_to_block_end(Agent, Block1, Block2, X1, Y1, X2, Y2),
  [moving(Agent, Block1, X1, Y1, X2, Y2)],
  [],
  [],
  [agent(Agent), block(Block1), block(Block2)],
  [
    del(moving(Agent, Block1, X1, Y1, X2, Y2)), del(clear(Block2)),
    add(available(Agent)), add(on(Block1, Block2)), add(at(Block1, X2, Y2))
  ]
).

% Move a block from the top of a block to another position on the table
action(move_block_block_to_table_start(Agent, Block1, Block2, X1, Y1, X2, Y2),
  [available(Agent), on(Block1, Block2), at(Block1, X1, Y1), clear(Block1)],
  [at(_, X2, Y2)],
  [],
  [agent(Agent), pos(X2, Y2), block(Block1), block(Block2)],
  [
    del(available(Agent)), del(clear(Block1)), del(on(Block1, Block2)),
    add(moving(Agent, Block1, X1, Y1, X2, Y2)), add(clear(Block2))
  ]
).
action(move_block_block_to_table_end(Agent, Block1, Block2, X1, Y1, X2, Y2),
  [moving(Agent, Block1, X1, Y1, X2, Y2)],
  [at(_, X2, Y2)],
  [],
  [agent(Agent), pos(X2, Y2), block(Block1)],
  [
    del(moving(Agent, Block1, X1, Y1, X2, Y2)),
    add(available(Agent)), add(clear(Block1)), add(ontable(Block1)), add(at(Block1, X2, Y2))
  ]
).

% Move a block from the top of a block to the top of another block
action(move_block_block_to_block_start(Agent, Block1, Block2, Block3, X1, Y1, X2, Y2),
  [available(Agent), on(Block1, Block2), at(Block1, X1, Y1), clear(Block1), at(Block3, X2, Y2), clear(Block3)],
  [],
  [],
  [agent(Agent), block(Block1), block(Block2), block(Block3)],
  [
    del(available(Agent)), del(clear(Block1)), del(on(Block1, Block2)),
    add(moving(Agent, Block1, X1, Y1, X2, Y2)), add(clear(Block2))
  ]
).
action(move_block_block_to_block_end(Agent, Block1, Block2, Block3, X1, Y1, X2, Y2),
  [moving(Agent, Block1, X1, Y1, X2, Y2)],
  [],
  [],
  [agent(Agent), block(Block1), block(Block3)],
  [
    del(moving(Agent, Block1, X1, Y1, X2, Y2)), del(clear(Block3)),
    add(available(Agent)), add(on(Block1, Block3)), add(at(Block1, X2, Y2))
  ]
).


%%%%%%%%%%%%%%%%%%%%%%%
% ll_actions
%%%%%%%%%%%%%%%%%%%%%%%
% Low-level action for starting to move the robotic arm
ll_action(move_arm_start(Arm, X1, Y1, X2, Y2),
  [ll_arm_at(Arm, X1, Y1)],
  [ll_arm_at(_, X2, Y2)],
  [],
  [ll_arm(Arm), pos(X2, Y2)],
  [
    del(ll_arm_at(Arm, X1, Y1)),
    add(ll_moving_arm(Arm, X1, Y1, X2, Y2))
  ]
).

% Low-level action for completing the movement of the robotic arm
ll_action(move_arm_end(Arm, X1, Y1, X2, Y2),
  [ll_moving_arm(Arm, X1, Y1, X2, Y2)],
  [],
  [],
  [ll_arm(Arm), pos(X2, Y2)],
  [
    del(ll_moving_arm(Arm, X1, Y1, X2, Y2)),
    add(ll_arm_at(Arm, X2, Y2))
  ]
).

% Low-level action for starting to close the gripper
ll_action(close_start(Arm),
  [ll_gripper(Arm, open)],
  [ll_gripper(Arm, close)],
  [],
  [ll_arm(Arm)],
  [
    del(ll_gripper(Arm, open)),
    add(ll_closing_gripper(Arm))
  ]
).

% Low-level action for indicating the gripper has closed
ll_action(close_end(Arm),
  [ll_closing_gripper(Arm)],
  [],
  [],
  [ll_arm(Arm)],
  [
    del(ll_closing_gripper(Arm)),
    add(ll_gripper(Arm, close))
  ]
).

% Low-level action for starting to open the gripper
ll_action(open_start(Arm),
  [ll_gripper(Arm, close)],
  [ll_gripper(Arm, open)],
  [],
  [ll_arm(Arm)],
  [
    del(ll_gripper(Arm, close)),
    add(ll_opening_gripper(Arm))
  ]
).

% Low-level action for indicating the gripper has opened
ll_action(open_end(Arm),
  [ll_opening_gripper(Arm)],
  [],
  [],
  [ll_arm(Arm)],
  [
    del(ll_opening_gripper(Arm)),
    add(ll_gripper(Arm, open))
  ]
).

%%%%%%%%%%%%%%%%%%%%%%%
% mappings
%%%%%%%%%%%%%%%%%%%%%%%
% Mapping for moving a block from the table to another position on the table
mapping(move_block_table_to_table_start(Agent, Block, X1, Y1, X2, Y2),
  [
    move_arm_start(Agent, X1, Y1, X1, Y1),
    close_start(Agent),
    close_end(Agent),
    move_arm_start(Agent, X1, Y1, X2, Y2),
    move_arm_end(Agent, X1, Y1, X2, Y2),
    open_start(Agent),
    open_end(Agent)
  ]
).

% Mapping for moving a block from the table to the top of another block
mapping(move_block_table_to_block_start(Agent, Block1, Block2, X1, Y1, X2, Y2),
  [
    move_arm_start(Agent, X1, Y1, X1, Y1),
    close_start(Agent),
    close_end(Agent),
    move_arm_start(Agent, X1, Y1, X2, Y2),
    move_arm_end(Agent, X1, Y1, X2, Y2),
    open_start(Agent),
    open_end(Agent)
  ]
).

% Mapping for moving a block from the top of a block to another position on the table
mapping(move_block_block_to_table_start(Agent, Block1, Block2, X1, Y1, X2, Y2),
  [
    move_arm_start(Agent, X1, Y1, X1, Y1),
    close_start(Agent),
    close_end(Agent),
    move_arm_start(Agent, X1, Y1, X2, Y2),
    move_arm_end(Agent, X1, Y1, X2, Y2),
    open_start(Agent),
    open_end(Agent)
  ]
).

% Mapping for moving a block from the top of a block to the top of another block
mapping(move_block_block_to_block_start(Agent, Block1, Block2, Block3, X1, Y1, X2, Y2),
  [
    move_arm_start(Agent, X1, Y1, X1, Y1),
    close_start(Agent),
    close_end(Agent),
    move_arm_start(Agent, X1, Y1, X2, Y2),
    move_arm_end(Agent, X1, Y1, X2, Y2),
    open_start(Agent),
    open_end(Agent)
  ]
).
