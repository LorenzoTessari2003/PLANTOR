% This file was automatically generated by the LLM system
%%%%%%%%%%%%%%%%%%%%%%%
% kb
%%%%%%%%%%%%%%%%%%%%%%%
% Define positions on the table
pos(1,1).
pos(2,3).
pos(3,4).
pos(5,5).

% Define blocks
block(b1).
block(b2).
block(b3).

% Define the agent
agent(a1).

% Define the robotic arm as a low-level concept
ll_arm(a1).

% Define resources
resources(agent(_)).
resources(ll_arm(_)).

%%%%%%%%%%%%%%%%%%%%%%%
% init
%%%%%%%%%%%%%%%%%%%%%%%
init_state([
  ontable(b1), ontable(b2), ontable(b3),
  at(b1,1,1), at(b2,2,3), at(b3,3,4),
  clear(b1), clear(b2), clear(b3),
  available(a1),
  ll_arm_at(a1,10,10),
  ll_gripper(a1,open)
]).

%%%%%%%%%%%%%%%%%%%%%%%
% goal
%%%%%%%%%%%%%%%%%%%%%%%
goal_state([
  ontable(b1), on(b2,b1), on(b3,b2),
  at(b1,5,5), at(b2,5,5), at(b3,5,5),
  clear(b3),
  available(a1),
  ll_arm_at(a1,_,_),
  ll_gripper(a1,_)
]).

%%%%%%%%%%%%%%%%%%%%%%%
% actions
%%%%%%%%%%%%%%%%%%%%%%%
% Move a block from a position on the table to another position on the table
action(move_block_start(Agent, Block, X1, Y1, X2, Y2),
  [available(Agent), ontable(Block), at(Block, X1, Y1), clear(Block), pos(X2, Y2)],
  [at(_, X2, Y2)],
  [],
  [block(Block), agent(Agent)],
  [del(available(Agent)), del(at(Block, X1, Y1)), del(clear(Block)),
   add(moving(Agent, Block, X1, Y1, X2, Y2))]
).

action(move_block_end(Agent, Block, X1, Y1, X2, Y2),
  [moving(Agent, Block, X1, Y1, X2, Y2)],
  [],
  [],
  [block(Block), agent(Agent)],
  [del(moving(Agent, Block, X1, Y1, X2, Y2)), add(at(Block, X2, Y2)), add(clear(Block)),
   add(available(Agent))]
).

% Move a block that is on the table to the top of another block
action(move_block_to_top_start(Agent, Block1, Block2, X1, Y1, X2, Y2),
  [available(Agent), ontable(Block1), at(Block1, X1, Y1), clear(Block1), at(Block2, X2, Y2), clear(Block2)],
  [],
  [],
  [block(Block1), block(Block2), agent(Agent)],
  [del(available(Agent)), del(at(Block1, X1, Y1)), del(clear(Block1)), del(clear(Block2)),
   add(moving_to_top(Agent, Block1, Block2, X1, Y1, X2, Y2))]
).

action(move_block_to_top_end(Agent, Block1, Block2, X1, Y1, X2, Y2),
  [moving_to_top(Agent, Block1, Block2, X1, Y1, X2, Y2)],
  [],
  [],
  [block(Block1), block(Block2), agent(Agent)],
  [del(moving_to_top(Agent, Block1, Block2, X1, Y1, X2, Y2)), add(on(Block1, Block2)), add(at(Block1, X2, Y2)),
   add(available(Agent))]
).

% Move a block on top of a block to another position on the table
action(move_top_block_to_table_start(Agent, Block1, Block2, X1, Y1, X2, Y2),
  [available(Agent), on(Block1, Block2), at(Block1, X1, Y1), clear(Block1), pos(X2, Y2)],
  [at(_, X2, Y2)],
  [],
  [block(Block1), block(Block2), agent(Agent)],
  [del(available(Agent)), del(on(Block1, Block2)), del(at(Block1, X1, Y1)), del(clear(Block1)),
   add(moving_to_table(Agent, Block1, X1, Y1, X2, Y2)), add(clear(Block2))]
).

action(move_top_block_to_table_end(Agent, Block1, Block2, X1, Y1, X2, Y2),
  [moving_to_table(Agent, Block1, X1, Y1, X2, Y2)],
  [],
  [],
  [block(Block1), block(Block2), agent(Agent)],
  [del(moving_to_table(Agent, Block1, X1, Y1, X2, Y2)), add(ontable(Block1)), add(at(Block1, X2, Y2)), add(clear(Block1)),
   add(available(Agent))]
).

% Move a block on top of a block to the top of another block
action(move_top_block_to_top_start(Agent, Block1, Block2, Block3, X1, Y1, X2, Y2),
  [available(Agent), on(Block1, Block2), at(Block1, X1, Y1), clear(Block1), at(Block3, X2, Y2), clear(Block3)],
  [],
  [],
  [block(Block1), block(Block2), block(Block3), agent(Agent)],
  [del(available(Agent)), del(on(Block1, Block2)), del(at(Block1, X1, Y1)), del(clear(Block1)), del(clear(Block3)),
   add(moving_top_to_top(Agent, Block1, Block2, Block3, X1, Y1, X2, Y2)), add(clear(Block2))]
).

action(move_top_block_to_top_end(Agent, Block1, Block2, Block3, X1, Y1, X2, Y2),
  [moving_top_to_top(Agent, Block1, Block2, Block3, X1, Y1, X2, Y2)],
  [],
  [],
  [block(Block1), block(Block2), block(Block3), agent(Agent)],
  [del(moving_top_to_top(Agent, Block1, Block2, Block3, X1, Y1, X2, Y2)), add(on(Block1, Block3)), add(at(Block1, X2, Y2)),
   add(available(Agent))]
).


%%%%%%%%%%%%%%%%%%%%%%%
% ll_actions
%%%%%%%%%%%%%%%%%%%%%%%
% Low-level action to move the robotic arm from one position to another
ll_action(ll_move_arm(arm, x1, y1, x2, y2),
  [ll_arm_at(arm, x1, y1)],
  [ll_moving_arm(arm, _, _, _, _)],
  [],
  [ll_arm(arm), pos(x2, y2)],
  [
    del(ll_arm_at(arm, x1, y1)),
    add(ll_moving_arm(arm, x1, y1, x2, y2))
  ]
).

ll_action(ll_move_arm_end(arm, x1, y1, x2, y2),
  [ll_moving_arm(arm, x1, y1, x2, y2)],
  [],
  [],
  [ll_arm(arm), pos(x2, y2)],
  [
    del(ll_moving_arm(arm, x1, y1, x2, y2)),
    add(ll_arm_at(arm, x2, y2))
  ]
).

% Low-level action to close the gripper of the robotic arm
ll_action(ll_close_gripper(arm),
  [ll_gripper(arm, open)],
  [ll_gripping(arm, _), ll_releasing(arm)],
  [],
  [ll_arm(arm)],
  [
    del(ll_gripper(arm, open)),
    add(ll_gripper(arm, close)),
    add(ll_gripping(arm))
  ]
).

% Low-level action to open the gripper of the robotic arm
ll_action(ll_open_gripper(arm),
  [ll_gripper(arm, close)],
  [ll_gripping(arm), ll_releasing(arm)],
  [],
  [ll_arm(arm)],
  [
    del(ll_gripper(arm, close)),
    add(ll_gripper(arm, open)),
    add(ll_releasing(arm))
  ]
).

%%%%%%%%%%%%%%%%%%%%%%%
% mappings
%%%%%%%%%%%%%%%%%%%%%%%
mapping(move_block_start(Agent, Block, X1, Y1, X2, Y2),
  [
    ll_move_arm(Agent, X1, Y1, X2, Y2),
    ll_close_gripper(Agent),
    ll_open_gripper(Agent)
  ]
).

mapping(move_block_to_top_start(Agent, Block1, Block2, X1, Y1, X2, Y2),
  [
    ll_move_arm(Agent, X1, Y1, X2, Y2),
    ll_close_gripper(Agent),
    ll_open_gripper(Agent)
  ]
).

mapping(move_top_block_to_table_start(Agent, Block1, Block2, X1, Y1, X2, Y2),
  [
    ll_move_arm(Agent, X1, Y1, X2, Y2),
    ll_close_gripper(Agent),
    ll_open_gripper(Agent)
  ]
).

mapping(move_top_block_to_top_start(Agent, Block1, Block2, Block3, X1, Y1, X2, Y2),
  [
    ll_move_arm(Agent, X1, Y1, X2, Y2),
    ll_close_gripper(Agent),
    ll_open_gripper(Agent)
  ]
).
